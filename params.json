{"tagline":"Command execution abstraction for PHP.","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Clinner\r\n\r\n[![Build Status](https://secure.travis-ci.org/ncuesta/Clinner.png)](http://travis-ci.org/ncuesta/Clinner)\r\n\r\n`Clinner` is a PHP 5.3+ Command-Line Interface commands execution abstraction.\r\n\r\n## Advantages\r\n\r\n`Clinner` has the following benefits:\r\n\r\n  * Minimalistic.\r\n  * Simple and easy to use.\r\n  * `Clinner` uses [Composer](http://getcomposer.org).\r\n  * Fluent API.\r\n  * Higher-level and object oriented interface to commands.\r\n  * Command pipes, **regardless of the underlying OS**.\r\n  * Commands might be actual command-line executables or PHP code.\r\n  * *Yes, you can mix commands and PHP code in an OO way!*\r\n  * Easily extendable through Interface implementation.\r\n  * MIT Licensed.\r\n\r\n## Usage\r\n\r\n### Simple usage\r\n\r\nThe most basic use of `Clinner` consists of installing it as a dependency via Composer\r\nand then including Composer's `autoloader.php` in your code:\r\n\r\n1. Create (if needed) a `composer.json` file or add an entry to your existing one:  \r\n```json\r\n    {\r\n        \"name\": \"my/nifty-project\",\r\n\r\n        \"require\": {\r\n            \"ncuesta/clinner\": \"dev-master\"\r\n        }\r\n    }\r\n```\r\n\r\n2. Include Composer's `autoload.php` file on your code:\r\n```php\r\n    <?php\r\n    \r\n        require_once __DIR__ . '/vendor/autoload.php';\r\n```\r\n\r\n3. Start using commands *right away*!\r\n```php\r\n    <?php\r\n\r\n        /*\r\n         * List current working directory's files\r\n         * and store the list as a string.\r\n         */\r\n        require_once __DIR__ . '/vendor/autoload.php';\r\n\r\n        use \\Clinner\\Command\\Command;\r\n\r\n\r\n        $command = new Command('ls');\r\n        $files = $command\r\n            ->run()\r\n            ->getOutput();\r\n        // Or get them as an array\r\n        $filesArray = $command->getOutputAsArray();\r\n    \r\n        if ($command->getExitCode() === 0) {\r\n            echo 'Everything went fine.';\r\n        } else {\r\n            echo 'Something didn\\'t work as expected...';\r\n        }\r\n\r\n        // There's also a factory method that allows\r\n        // to make best use of the fluent API\r\n        echo Command::create('ls')\r\n            ->run()\r\n            ->getOutput();\r\n```\r\n\r\n### Passing arguments\r\n\r\nCommands crave for arguments, so `Clinner` offers a way to satisfying them.\r\nBy passing in a second argument to the factory method or the constructor, or\r\nusing the dedicated setter method `setArguments()`.\r\n\r\n```php\r\n<?php\r\n\r\n    use \\Clinner\\Command\\Command;\r\n\r\n\r\n    // Commands will most certainly take arguments,\r\n    // so let's try something with them\r\n    $command = new Command('cat', array('/etc/hosts'));\r\n    // This will run `cat /etc/hosts`\r\n    $command->run();\r\n\r\n    // You might also use its factory method\r\n    // to take even more advantage of the fluent API\r\n    echo Command::create('cat', array('/etc/hosts'))\r\n        ->run()\r\n        ->getOutput();\r\n```\r\n\r\nArguments can either be key-value pairs or just values. Key value pairs will be joined using a\r\n`delimiter` (see **Options** section for more information).\r\n\r\n### Options\r\n\r\nOptions allow customization of different `Command` behaviors. They can be passed in as a third\r\nargument for the factory method or constructor, or set via the `setOptions()` method.\r\n\r\nCurrently there's only one thing that can be customized for the `Command` class, but it's worth\r\nnoting it: you might specify the delimiter, a `string` that will be used to join key-value pairs\r\nof arguments. If not specified, it will default to the equals sign (`=`).\r\n\r\nLet's see an example:\r\n\r\n```php\r\n<?php\r\n\r\n    use \\Clinner\\Command\\Command;\r\n\r\n\r\n    // `cut` command won't work if key-value pairs of arguments\r\n    // are joined with '=':\r\n    $command = Command::create(\r\n        'cut',\r\n        array(\r\n            '-d' => ':',\r\n            '-f' => 1,\r\n            '/etc/passwd',\r\n        )\r\n    );\r\n\r\n    $command->run();\r\n        // => will run `cut -d=: -f=1 /etc/passwd` (WRONG)\r\n\r\n    // Change the delimiter to '' (an empty string)\r\n    $command->setOptions(array('delimiter' => ''));\r\n\r\n    $command->run();\r\n        // => will run `cut -d: -f1 /etc/passwd` (CORRECT)\r\n```\r\n\r\n### Advanced usage: Commands pipes\r\n\r\nCommands can be piped just like in any Unix shell. The basics of command pipes is that the output\r\nof a command is sent to the one that is piped to it.\r\n\r\nFor example, if you want to run `ls -a | grep -i clinner`, you can:\r\n\r\n```php\r\n<?php\r\n\r\n    use \\Clinner\\Command\\Command;\r\n\r\n\r\n    $grepCommand = Command::create('grep', array('-i', 'clinner'));\r\n    $lsCommand   = Command::create('ls', array('-a'));\r\n\r\n    $lsCommand\r\n        ->pipe($grepCommand)\r\n        ->run();\r\n\r\n    $pipeOutput = $lsCommand->getOutput();\r\n\r\n    // Or the same thing in an uglier but more pro way\r\n\r\n    $pipeOutput = Command::create('ls', array('-a'))\r\n        ->pipe(Command::create('grep', array('-i', 'clinner')))\r\n        ->run()\r\n        ->getOutput();\r\n```\r\n\r\nCommand pipes are not limited to a number of commands, you only need *at least* two commands.\r\n\r\nSee next section for a more complex example involving 3 commands in a pipeline.\r\n\r\n### Advanced usage: Mixing PHP with commands\r\n\r\nApart from `Command` class, `Clinner` ships with a `Callback` command class that enables to\r\nmix both commands and PHP code in a command pipe. *Pretty cool, huh?*\r\n\r\n`Callback` class only takes a `Closure` or a function reference in its constructor and then\r\nis ready to run. That `Closure` function will receive the command's input as its first argument\r\nand is expected to return an exit code. Any information output by the function (either via `echo`\r\nor `print` or any other output method) will be considered as the command output and will be sent\r\nto the next command in the pipe, if any.\r\n\r\n```php\r\n<?php\r\n\r\n    use \\Clinner\\Command\\Command;\r\n    use \\Clinner\\Command\\Callback;\r\n\r\n\r\n    // Get all the usernames in the system that contain an 'a' in them\r\n    $callbackCommand = new Callback(function($input) {\r\n        foreach (explode(\"\\n\", $input) as $line) {\r\n            if (false !== strchr($line, 'a')) {\r\n                echo \"$line\\n\";\r\n            }\r\n        }\r\n    });\r\n\r\n    $systemUsers = Command::create('cat', array('/etc/passwd'))\r\n        ->pipe(\r\n            Command::create('grep', array('-v' => '^#'), array('delimiter' => ' '))\r\n        )\r\n        ->pipe(\r\n            Command::create('cut', array('-d' => ':', '-f' => 1), array('delimiter' => ''))\r\n        )\r\n        ->pipe($callbackCommand)\r\n        ->run()\r\n        ->getOutputAsArray(\"\\n\");\r\n```\r\n\r\n### Creating commands from string\r\n\r\nAs of `0.1.2` it is possible to create a `Command` instance from a string, using\r\nthe command as if you had written it in a CLI.\r\n\r\nFor instance, the following command could be run on the CLI:\r\n\r\n```bash\r\n~$ cat /etc/hosts | grep localhost | tr -s \"\\t\" \" \"\r\n```\r\n\r\nWould output all the lines in the `/etc/hosts` file that contain the string `localhost` with any\r\ntab (`\\t`) indent replaced by a single blank space (` `).\r\n\r\nThis very same command can be passed as a `string` to `\\Clinner\\Command\\Command::fromString()` and\r\na new `Command` instance representing this commands chain will be returned:\r\n\r\n```php\r\n<?php\r\n\r\n    use \\Clinner\\Command\\Command;\r\n    \r\n    \r\n    $commandString = 'cat /etc/hosts | grep localhost | tr -s \"\\t\" \" \"';\r\n    $command = Command::fromString($commandString);\r\n    \r\n    // This is equivalent to:\r\n    $command = Command::create('cat', array('/etc/hosts'))\r\n        ->pipe(\r\n            Command::create('grep', array('localhost'))\r\n        )\r\n        -> pipe(\r\n            Command::create('tr', array('-s', '\"\\t\"', '\" \"'))\r\n        );\r\n```\r\n\r\nAnd then you can work with the newly created `Command` instance as usual, and pipe other\r\n`Command`s or even `Callback`s to it.\r\n\r\n## Requirements\r\n\r\nThe only requirement for `Clinner` is PHP version >= 5.3.\r\n\r\n## Contributing\r\n\r\nPlease, feel free to fork this repo and improve it in any way you consider useful\r\n -- Pull Requests are welcome!\r\n","google":"UA-28341570-1","name":"Clinner"}